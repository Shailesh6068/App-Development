package com.example.unitconverter

import android.os.Bundle
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.width
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowDropDown
import androidx.compose.material3.Button
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.core.app.ComponentActivity
import com.example.unitconverter.ui.theme.UnitConverterTheme
import kotlin.math.roundToInt

class MainActivity : androidx.activity.ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            UnitConverterTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    UnitConverter()
                }
            }
        }
    }
}

@Composable
fun UnitConverter(){

    var inputValue by remember{ mutableStateOf("") }
    var outputValue by remember{ mutableStateOf("0.0") }
    var inputUnit by remember{ mutableStateOf("meter") }
    var outputUnit by remember{ mutableStateOf("meter") }
    var iExpended by remember{ mutableStateOf(false) }
    var oExpended by remember{ mutableStateOf(false) }
    val iconversionFactor = remember{ mutableStateOf(1.0) }
    val oconversionFactor = remember{ mutableStateOf(1.0) }

    fun unitConverter(){

        //Elvis operator (?:)
        var inputValueDouble = inputValue.toDoubleOrNull() ?: 0.0
        var result = (inputValueDouble * 100.0 * iconversionFactor.value/oconversionFactor.value).roundToInt()/100.0
        outputValue = result.toString()

    }


    Column (
        verticalArrangement = Arrangement.Center, //Set content at center in vertical column
        horizontalAlignment = Alignment.CenterHorizontally,  ////Set content at center in horizontal row
        modifier = Modifier.fillMaxSize()  //content will take max size. note-not entire UI
    ){

        Text(text = "Unit Converter",
            style = MaterialTheme.typography.headlineMedium
            )

        Spacer(modifier = Modifier.height(16.dp))

        OutlinedTextField(
            value = inputValue,
            onValueChange = {
                inputValue = it
                unitConverter()
            },
            label = { Text(text = "Enter Value")}
        )

        Spacer(modifier = Modifier.height(16.dp))

        Row {

            Box {


                Button(onClick = {iExpended = true}) {
                    Text(text = inputUnit)
                    Icon(Icons.Default.ArrowDropDown, contentDescription = "Arrow Down")

                }
                DropdownMenu(expanded = iExpended, onDismissRequest = { iExpended = false }) {
                    DropdownMenuItem(
                        text = { Text(text = "Centimeter")},
                        onClick = {
                            iExpended = false
                            inputUnit = "centimeter"
                            iconversionFactor.value = 0.01
                            unitConverter()

                        }
                    )
                    DropdownMenuItem(
                        text = { Text(text = "Meter")},
                        onClick = {
                            iExpended = false
                            inputUnit = "meter"
                            iconversionFactor.value = 1.0
                            unitConverter()

                        }
                    )
                    DropdownMenuItem(
                        text = { Text(text = "Feet")},
                        onClick = {
                            iExpended = false
                            inputUnit = "feet"
                            iconversionFactor.value = 0.3048
                            unitConverter()

                        }
                    )
                    DropdownMenuItem(
                        text = { Text(text = "Milimeter")},
                        onClick = {
                            iExpended = false
                            inputUnit = "millimeter"
                            iconversionFactor.value = 0.001
                            unitConverter()

                        }
                    )
                }
            }
            Spacer(modifier = Modifier.width(16.dp))
            Box {

                Button(onClick = {oExpended = true}) {
                    Text(text = outputUnit)
                    Icon(Icons.Default.ArrowDropDown, contentDescription = "Arrow Down")

                }
                DropdownMenu(expanded = oExpended, onDismissRequest = { oExpended = false }) {
                    DropdownMenuItem(
                        text = { Text(text = "Centimeter")},
                        onClick = {
                            oExpended = false
                            outputUnit = "centimeter"
                            oconversionFactor.value = 0.01
                            unitConverter()

                        }
                    )
                    DropdownMenuItem(
                        text = { Text(text = "Meter")},
                        onClick = {
                            oExpended = false
                            outputUnit = "meter"
                            oconversionFactor.value = 1.0
                            unitConverter()

                        }
                    )
                    DropdownMenuItem(
                        text = { Text(text = "Feet")},
                        onClick = {
                            oExpended = false
                            outputUnit = "feet"
                            oconversionFactor.value = 0.3048
                            unitConverter()

                        }
                    )
                    DropdownMenuItem(
                        text = { Text(text = "Milimeter")},
                        onClick = {
                            oExpended = false
                            outputUnit = "millimeter"
                            oconversionFactor.value = 0.001
                            unitConverter()

                        }
                    )
                }
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        Text(text = "Result : $outputValue $outputUnit",
            style = MaterialTheme.typography.headlineMedium
        )
    }
}
@Preview(showBackground = true)
@Composable
fun UnitConverterPreview() {
    UnitConverter()
}
